<Page
    x:Class="StateTriggersSample.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:StateTriggersSample"
    xmlns:triggers="using:StateTriggersSample.CustomTriggers"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Page.Resources>
        <!-- Styles to be used for mouse vs. touch/pen hit targets -->
        <Style x:Key="MouseStyle" TargetType="Rectangle">
            <Setter Property="Margin" Value="5" />
            <Setter Property="Height" Value="20" />
            <Setter Property="Width" Value="20" />
        </Style>
        <Style x:Key="TouchPenStyle" TargetType="Rectangle">
            <Setter Property="Margin" Value="15" />
            <Setter Property="Height" Value="40" />
            <Setter Property="Width" Value="40" />
        </Style>
    </Page.Resources>
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" VerticalScrollMode="Auto" HorizontalScrollMode="Disabled">        
        <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">       
            <TextBlock x:Name="title" Style="{ThemeResource HeaderTextBlockStyle}" Text="Custom triggers scenario sample" Margin="12" />
            <!-- Scenario1 illustrates the use of an Input type trigger using a button flyout. The hit target sizes and margins for the flyout will be appropriately placed based on type of input used to invoke the button -->
            <TextBlock x:Name="inputLabel" RelativePanel.Below="title" Style="{ThemeResource BodyTextBlockStyle}" TextWrapping="WrapWholeWords" Width="250" Margin="20"
                   Text="Invoke this Color Palette Button to see a flyout with hit targets optimized for different types of input (touch/mouse/pen etc.,)"/>
            <Button Content="Color Palette Button" x:Name="MenuButton">
                <Button.Flyout>
                    <Flyout Placement="Bottom">
                        <RelativePanel>
                            <Rectangle Name="BlueRect" Fill="Blue"/>
                            <Rectangle Name="GreenRect" Fill="Green" RelativePanel.RightOf="BlueRect" />
                            <Rectangle Name="RedRect" Fill="Red" RelativePanel.Below="BlueRect" />
                            <Rectangle Name="YellowRect" Fill="Yellow" RelativePanel.Below="GreenRect" RelativePanel.RightOf="RedRect" />
                        </RelativePanel>
                    </Flyout>
                </Button.Flyout>
            </Button>
            <!-- Scenario2 illustrates the use of a DeviceFamily based trigger. The avatar and label below will be shown only on devices that belong to the Xbox Device Family -->
            <TextBlock x:Name="avatarLabel" Style="{ThemeResource BodyTextBlockStyle}" Visibility="Collapsed" TextWrapping="WrapWholeWords" Width="250" Margin="20"
                   Text="This label and the avatar image will only be shown when this app is being viewed in an Xbox device family." />
            <Image x:Name="avatar" Source="Assets/avatar.png" Visibility="Collapsed" Stretch="UniformToFill" Height="100" Width="65" Margin="20" />
            <!-- Scenario3 below uses an items control to illustrate a control size based trigger and a view model based trigger -->
            <ListView x:Name="list" Margin="12" BorderBrush="Black" BorderThickness="2" Padding="0">
                <ListView.Header>
                    <TextBlock Style="{ThemeResource SubtitleTextBlockStyle}" Margin="3" Text="List of items showing control size and viewmodel based triggers" TextWrapping="Wrap" />
                </ListView.Header>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapGrid Orientation="Horizontal" ItemHeight="250" ItemWidth="300"/>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <local:ItemTemplateControl />
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>          
        </RelativePanel>
        <!-- It is recommended best practice to encapsulate different types of triggers within individual VisualStateGroups in order for them to be evaulated and applied independent of each other 
             Only one VisualState can be active within a VisualStateGroup whereas multiple VisualStates within individual VisualStateGroups can be active simultaneously -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="WindowSizeStates">
                <!-- First set of VisualStates are simple responsive states based on window size. AdaptiveTrigger is a built-in trigger that XAML knows to automatically trigger based on window size -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- Trigger below indicates that this VisualState is to be applied when the current window width is >= 720 effective pixels -->
                        <AdaptiveTrigger MinWindowWidth="720" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Simplified Setter statements are used to move elements around to optimize for more available space -->
                        <Setter Target="MenuButton.(RelativePanel.RightOf)" Value="inputLabel" />
                        <Setter Target="MenuButton.(RelativePanel.Below)" Value="title" />
                        <Setter Target="MenuButton.Margin" Value="20" />
                        <Setter Target="avatar.(RelativePanel.RightOf)" Value="avatarLabel" />
                        <Setter Target="avatar.(RelativePanel.Below)" Value="inputLabel" />
                        <Setter Target="avatar.Margin" Value="20" />
                        <Setter Target="avatarLabel.(RelativePanel.Below)" Value="inputLabel" />
                        <Setter Target="list.(RelativePanel.Below)" Value="avatar" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- Trigger below indicates that this VisualState is to be applied when current window width is >=0 and <720 effective pixels -->
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Simplified Setter statements are used to move elements around to optimize for lesser available space -->
                        <Setter Target="MenuButton.(RelativePanel.Below)" Value="inputLabel" />
                        <Setter Target="MenuButton.Margin" Value="20,5" />
                        <Setter Target="avatar.(RelativePanel.Below)" Value="avatarLabel" />
                        <Setter Target="avatar.Margin" Value="20,5" />
                        <Setter Target="avatarLabel.(RelativePanel.Below)" Value="MenuButton" />
                        <Setter Target="list.(RelativePanel.Below)" Value="avatar" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="InputTypeStates">
                <!-- Second set of VisualStates for building responsive UI optimized for input type.
                Take a look at InputTypeTrigger.cs class in CustomTriggers folder to see how this is implemented -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- This trigger indicates that this VisualState is to be applied when MenuButton is invoked using a mouse -->
                        <triggers:InputTypeTrigger TargetElement="{x:Bind MenuButton}" PointerType="Mouse" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="BlueRect.Style" Value="{StaticResource MouseStyle}" />
                        <Setter Target="GreenRect.Style" Value="{StaticResource MouseStyle}" />
                        <Setter Target="RedRect.Style" Value="{StaticResource MouseStyle}" />
                        <Setter Target="YellowRect.Style" Value="{StaticResource MouseStyle}" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- Multiple trigger statements can be declared in the following way to imply OR usage.
                        For example, the following statements indicate that this VisualState is to be applied when MenuButton is invoked using Touch OR Pen-->
                        <triggers:InputTypeTrigger TargetElement="{x:Bind MenuButton}" PointerType="Touch" />
                        <triggers:InputTypeTrigger TargetElement="{x:Bind MenuButton}" PointerType="Pen" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="BlueRect.Style" Value="{StaticResource TouchPenStyle}" />
                        <Setter Target="GreenRect.Style" Value="{StaticResource TouchPenStyle}" />
                        <Setter Target="RedRect.Style" Value="{StaticResource TouchPenStyle}" />
                        <Setter Target="YellowRect.Style" Value="{StaticResource TouchPenStyle}" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="DeviceFamilyStates">
                <!-- Third set of VisualStates for building responsive UI optimized for DeviceFamily.
                Take a look at DeviceFamilyTrigger.cs class in CustomTriggers folder to see how this is implemented -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <!-- This trigger indicates that this VisualState is to be applied if the current device family the app is running on is "Windows Xbox"-->
                        <triggers:DeviceFamilyTrigger DeviceFamily="Windows.Xbox" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Show the avatar icon only for Xbox family of devices -->
                        <Setter Target="avatar.Visibility" Value="Visible" />
                        <Setter Target="avatarLabel.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </ScrollViewer>
</Page>
