<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="MIDI.Scenario3_SendMIDIMessages"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:MIDI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Margin="12,20,12,12">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="outputDevices.(RelativePanel.AlignLeftWith)" Value="outputDevicesLabel" />
                        <Setter Target="outputDevices.(RelativePanel.Below)" Value="outputDevicesLabel" />
                        <Setter Target="messageTypeLabel.(RelativePanel.AlignLeftWith)" Value="outputDevices" />
                        <Setter Target="messageTypeLabel.(RelativePanel.Below)" Value="outputDevices" />
                        <Setter Target="messageType.(RelativePanel.AlignLeftWith)" Value="messageTypeLabel" />
                        <Setter Target="messageType.(RelativePanel.Below)" Value="messageTypeLabel" />
                        <Setter Target="messageParameters.(RelativePanel.AlignLeftWith)" Value="messageType" />
                        <Setter Target="messageParameters.(RelativePanel.Below)" Value="messageType" />
                        <Setter Target="sysExMessageContainer.(RelativePanel.AlignLeftWith)" Value="messageParameters" />
                        <Setter Target="sysExMessageContainer.(RelativePanel.Below)" Value="messageParameters" />
                        <Setter Target="messageActionContainer.(RelativePanel.AlignLeftWith)" Value="sysExMessageContainer" />
                        <Setter Target="messageActionContainer.(RelativePanel.Below)" Value="sysExMessageContainer" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <Grid x:Name="rootGrid" Margin="12,20,12,12">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Margin="0,0,0,10">
                <TextBlock Text="Description" Style="{StaticResource SampleHeaderTextStyle}"/>
                <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="This scenario sends MIDI output to a MIDI device (external or the built-in synth). Device auto-detection is enabled. Select an output device to send MIDI messages to it." />
            </StackPanel>

            <!--Main content is scrollable-->
            <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto"  Margin="0,0,0,40">
                <RelativePanel HorizontalAlignment="Stretch">
                    <!--List output MIDI devices-->
                    <TextBlock x:Name="outputDevicesLabel" Style="{StaticResource ScenarioHeaderTextStyle}" Text="OUTPUT DEVICES" />
                    <ListBox x:Name="outputDevices" Style="{StaticResource InputOutputDeviceListStyle}" IsEnabled="False" SelectionChanged="outputDevices_SelectionChanged" />
                    
                    <!--List available MIDI message types-->
                    <TextBlock x:Name="messageTypeLabel" Style="{StaticResource ScenarioHeaderTextStyle}" Text="SEND MESSAGE" />
                    <ComboBox x:Name="messageType" Style="{StaticResource MessageTypeStyle}" IsEnabled="False" SelectionChanged="messageType_SelectionChanged" />
                    
                    <!--MIDI message parameters required for some types of MIDI messages-->
                    <StackPanel x:Name="messageParameters" Orientation="Horizontal" Margin="0,20,0,0">
                        <StackPanel>
                            <ComboBox x:Name="parameter1" Width="140" Margin="0" IsEnabled="False" Header="Parameter 1" Visibility="Collapsed" SelectionChanged="Parameter1_SelectionChanged" />
                        </StackPanel>
                        <StackPanel>
                            <ComboBox x:Name="parameter2" Width="140" Margin="10,0,0,0" IsEnabled="False" Header="Parameter 2" Visibility="Collapsed" SelectionChanged="Parameter2_SelectionChanged" />
                        </StackPanel>
                        <StackPanel>
                            <ComboBox x:Name="parameter3" Width="140" Margin="10,0,0,0" IsEnabled="False" Header="Parameter 3" Visibility="Collapsed" SelectionChanged="Parameter3_SelectionChanged" />
                        </StackPanel>
                    </StackPanel>
                    
                    <!--Message Send & Reset buttons-->
                    <StackPanel x:Name="sysExMessageContainer" Orientation="Horizontal" Margin="0,20,0,0">
                        <TextBlock x:Name="rawBufferHeader" Text="Enter SysEx Message: " Style="{StaticResource BasicTextStyle}" VerticalAlignment="Bottom" Visibility="Collapsed"/>
                        <TextBox x:Name="sysExMessageContent" Visibility="Collapsed" VerticalAlignment="Center" Margin="5,0,0,0" />
                    </StackPanel>

                    <!--Message Reset & Send buttons-->
                    <StackPanel x:Name="messageActionContainer" Orientation="Horizontal" Margin="0,20,0,0">
                        <Button x:Name="resetButton" Style="{StaticResource MessageActionStyle}" Click="resetButton_Click" IsEnabled="False" Content="Reset" />
                        <Button x:Name="sendButton" Style="{StaticResource MessageActionStyle}" Click="sendButton_Click" IsEnabled="False" Content="Send" />
                    </StackPanel>
                </RelativePanel>           
            </ScrollViewer>

            <!-- Status Block for providing messages to the user.  Use the
             NotifyUser() method to populate the message -->
            <Border x:Name="errorBorder" Background="Red" Grid.Row="2"/>
            <TextBlock x:Name="statusBlock" Grid.Row="2" Margin="12, 10, 12, 10" Visibility="Collapsed"/>
        </Grid>
    </Grid>
</Page>
