<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario1_Colors"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:SDKTemplate"
    mc:Ignorable="d">

    <Page.Resources>
        <!-- local:ColorBindingConverter x:Key="ColorConverter"/ -->
    </Page.Resources>
    
    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid x:Name="RootGrid" Margin="12,10,12,12">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel Margin="0,0,0,10">
                <TextBlock Text="Description:" Style="{StaticResource SampleHeaderTextStyle}"/>
                <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
                    Custom colors
                </TextBlock>
            </StackPanel>

            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                        An app can customize the color of the title bar and the title bar buttons.
                    </TextBlock>
                    <RadioButton x:Name="UseStandardColors" Margin="0,10,0,0" GroupName="Colors" Click="UseCustomColors_Click">Use standard colors</RadioButton>
                    <RadioButton x:Name="UseCustomColors" GroupName="Colors" Click="UseCustomColors_Click">Use custom colors</RadioButton>
                    <RadioButton x:Name="TransparentWhenExtended" GroupName="Colors" Click="UseCustomColors_Click">Use custom colors with transparent buttons when view is extended (See Scenario 2)</RadioButton>
                    <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                        Custom BackgroundColor: <Run x:Name="BackgroundColorText"/>
                        <LineBreak/>Custom ForegroundColor: <Run x:Name="ForegroundColorText"/>
                        <LineBreak/>Custom InactiveBackgroundColor: <Run x:Name="InactiveBackgroundColorText"/>
                        <LineBreak/>Custom InactiveForegroundColor: <Run x:Name="InactiveForegroundColorText"/>
                        <LineBreak/>
                        <LineBreak/>Custom ButtonBackgroundColor: <Run x:Name="ButtonBackgroundColorText"/>
                        <LineBreak/>Custom ButtonHoverBackgroundColor: <Run x:Name="ButtonHoverBackgroundColorText"/>
                        <LineBreak/>Custom ButtonPressedBackgroundColor: <Run x:Name="ButtonPressedBackgroundColorText"/>
                        <LineBreak/>Custom ButtonInactiveBackgroundColor: <Run x:Name="ButtonInactiveBackgroundColorText"/>
                        <LineBreak/>
                        <LineBreak/>Custom ButtonForegroundColor: <Run x:Name="ButtonForegroundColorText"/>
                        <LineBreak/>Custom ButtonHoverForegroundColor: <Run x:Name="ButtonHoverForegroundColorText"/>
                        <LineBreak/>Custom ButtonPressedForegroundColor: <Run x:Name="ButtonPressedForegroundColorText"/>
                        <LineBreak/>Custom ButtonInactiveForegroundColor: <Run x:Name="ButtonInactiveForegroundColorText"/>
                    </TextBlock>
                </StackPanel>
            </ScrollViewer>
        </Grid>
    </Grid>
</Page>
