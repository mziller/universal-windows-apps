<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="MIDI.Scenario1_MIDIDeviceEnumeration"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:MIDI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Margin="12,20,12,12">
        <VisualStateManager.VisualStateGroups>
			<VisualStateGroup>
				<VisualState>
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="800"/>
					</VisualState.StateTriggers>
					<VisualState.Setters>
                        <Setter Target="deviceAutoDetectToggle.(RelativePanel.RightOf)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listInputDevicesButtonLabel.(RelativePanel.AlignLeftWith)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listInputDevicesButtonLabel.(RelativePanel.Below)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listInputDevicesButton.(RelativePanel.AlignLeftWith)" Value="listInputDevicesButtonLabel" />
                        <Setter Target="listInputDevicesButton.(RelativePanel.Below)" Value="listInputDevicesButtonLabel" />
                        <Setter Target="inputDevices.(RelativePanel.AlignLeftWith)" Value="listInputDevicesButton" />
                        <Setter Target="inputDevices.(RelativePanel.Below)" Value="listInputDevicesButton" />
                        <!--Properties are beside the device list-->
                        <Setter Target="inputDeviceProperties.(RelativePanel.AlignTopWith)" Value="inputDevices" />
                        <Setter Target="inputDeviceProperties.(RelativePanel.RightOf)" Value="inputDevices" />
                        <Setter Target="listOutputDevicesButtonLabel.(RelativePanel.AlignLeftWith)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listOutputDevicesButtonLabel.(RelativePanel.Below)" Value="inputDeviceProperties" />
                        <Setter Target="listOutputDevicesButton.(RelativePanel.AlignLeftWith)" Value="listOutputDevicesButtonLabel" />
                        <Setter Target="listOutputDevicesButton.(RelativePanel.Below)" Value="listOutputDevicesButtonLabel" />
                        <Setter Target="outputDevices.(RelativePanel.AlignLeftWith)" Value="listOutputDevicesButton" />
                        <Setter Target="outputDevices.(RelativePanel.Below)" Value="listOutputDevicesButton" />
                        <!--Properties are beside the device list-->
                        <Setter Target="outputDeviceProperties.(RelativePanel.AlignTopWith)" Value="outputDevices" />
                        <Setter Target="outputDeviceProperties.(RelativePanel.RightOf)" Value="outputDevices" />
					</VisualState.Setters>
				</VisualState>
				<VisualState>
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="0"/>
					</VisualState.StateTriggers>
					<VisualState.Setters>
                        <Setter Target="deviceAutoDetectToggle.(RelativePanel.RightOf)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listInputDevicesButtonLabel.(RelativePanel.AlignLeftWith)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listInputDevicesButtonLabel.(RelativePanel.Below)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listInputDevicesButton.(RelativePanel.AlignLeftWith)" Value="listInputDevicesButtonLabel" />
                        <Setter Target="listInputDevicesButton.(RelativePanel.Below)" Value="listInputDevicesButtonLabel" />
                        <Setter Target="inputDevices.(RelativePanel.AlignLeftWith)" Value="listInputDevicesButton" />
                        <Setter Target="inputDevices.(RelativePanel.Below)" Value="listInputDevicesButton" />
                        <!--Move the properties to below the device list-->
                        <Setter Target="inputDeviceProperties.(RelativePanel.AlignLeftWith)" Value="inputDevices" />
                        <Setter Target="inputDeviceProperties.(RelativePanel.Below)" Value="inputDevices" />
                        <Setter Target="inputDeviceProperties.(Margin)" Value="0,20,20,0" />
                        <Setter Target="listOutputDevicesButtonLabel.(RelativePanel.AlignLeftWith)" Value="deviceAutoDetectToggleLabel" />
                        <Setter Target="listOutputDevicesButtonLabel.(RelativePanel.Below)" Value="inputDeviceProperties" />
                        <Setter Target="listOutputDevicesButton.(RelativePanel.AlignLeftWith)" Value="listOutputDevicesButtonLabel" />
                        <Setter Target="listOutputDevicesButton.(RelativePanel.Below)" Value="listOutputDevicesButtonLabel" />
                        <Setter Target="outputDevices.(RelativePanel.AlignLeftWith)" Value="listOutputDevicesButton" />
                        <Setter Target="outputDevices.(RelativePanel.Below)" Value="listOutputDevicesButton" />
                        <!--Move the properties to below the device list-->
						<Setter Target="outputDeviceProperties.(RelativePanel.AlignLeftWith)" Value="outputDevices" />
						<Setter Target="outputDeviceProperties.(RelativePanel.Below)" Value="outputDevices" />
                        <Setter Target="outputDeviceProperties.(Margin)" Value="0,20,20,0" />
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>
        <Grid x:Name="rootGrid" Margin="12,20,12,12">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0" Margin="0,0,0,10">
                <TextBlock Style="{StaticResource SampleHeaderTextStyle}" Text="Description" />
                <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="This scenario illustrates MIDI Device Enumeration. Connect a MIDI device to see it in the list." />
            </StackPanel>

            <!--Main content is scrollable-->
            <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto" Margin="0,0,0,40">
                <RelativePanel HorizontalAlignment="Stretch">
                    <!--Auto-detect MIDI devices-->
                    <TextBlock x:Name="deviceAutoDetectToggleLabel" Style="{StaticResource ScenarioHeaderTextStyle}" Text="AUTO-DETECT" />
                    <ToggleSwitch x:Name="deviceAutoDetectToggle" IsOn="False" Margin="40,23,0,0" Toggled="DeviceAutoDetectToggle_Toggled" />

                    <!--List input MIDI devices-->
                    <TextBlock x:Name="listInputDevicesButtonLabel" Style="{StaticResource ScenarioHeaderTextStyle}" Text="INPUT" />
                    <Button x:Name="listInputDevicesButton" Style="{StaticResource ScenarioButtonStyle}" Content="List all input devices" Click="listInputDevicesButton_Click" />

                    <!--Input MIDI device details-->
                    <ListBox x:Name="inputDevices" Style="{StaticResource DeviceListStyle}" SelectionChanged="inputDevices_SelectionChanged" />
                    <ListBox x:Name="inputDeviceProperties" Style="{StaticResource DevicePropertiesStyle}" ItemContainerStyle="{StaticResource ScenarioUnselectableListBoxStyle}" />

                    <!--List output MIDI devices-->
                    <TextBlock x:Name="listOutputDevicesButtonLabel" Style="{StaticResource ScenarioHeaderTextStyle}" Text="OUTPUT" />
                    <Button x:Name="listOutputDevicesButton" Style="{StaticResource ScenarioButtonStyle}" Content="List all output devices" Click="listOutputDevicesButton_Click" />

                    <!--Output MIDI device details-->
                    <ListBox x:Name="outputDevices" Style="{StaticResource DeviceListStyle}" SelectionChanged="outputDevices_SelectionChanged" />
                    <ListBox x:Name="outputDeviceProperties" Style="{StaticResource DevicePropertiesStyle}" ItemContainerStyle="{StaticResource ScenarioUnselectableListBoxStyle}" />
                </RelativePanel>
            </ScrollViewer>

            <!-- Status Block for providing messages to the user.  Use the
             NotifyUser() method to populate the message -->
            <Border x:Name="errorBorder" Background="Red" Grid.Row="2"/>
            <TextBlock x:Name="statusBlock" Grid.Row="2" Margin="12, 10, 12, 10" Visibility="Collapsed"/>
        </Grid>
    </Grid>
</Page>