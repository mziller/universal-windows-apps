<Page
    x:Class="xDeferLoadStrategy.AdaptivePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:xDeferLoadStrategy"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <!--VSM Setters and Storyboards will realize elements when the state is triggered.
            In this case, we are triggering the states with adaptive triggers, but they could also be
            pointer states, keyboard states, etc. -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="Layouts">
                <VisualState x:Name="Phone">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Tablet">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="768" />
                    </VisualState.StateTriggers>
                    <!--<VisualState.Setters>
                        <Setter Target="ReadingPane.Visibility" Value="Visible" />
                    </VisualState.Setters>-->
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ReadingPane" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame Value="Visible" KeyTime="0" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="Desktop">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="1200" />
                    </VisualState.StateTriggers>
                    <!--<VisualState.Setters>
                        <Setter Target="AccountsList.Visibility" Value="Visible" />
                        <Setter Target="ReadingPane.Visibility" Value="Visible" />
                    </VisualState.Setters>-->
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ReadingPane" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame Value="Visible" KeyTime="0" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="AccountsList" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame Value="Visible" KeyTime="0" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        
        <TextBlock Text="Deferral can be used with VSM to create elements on the fly when screen size changes.  This example shows how to create an adaptive UI that will stretch from phone to desktop and only create the necessary panes for the display size." MaxWidth="560" Margin="12" Grid.ColumnSpan="3" HorizontalAlignment="Left" TextWrapping="WrapWholeWords" />

        <ListView x:Name="AccountsList" x:DeferLoadStrategy="Lazy" Loading="AccountsList_Loading" Grid.Row="1">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding IconUri}" Margin="12,4,12,0" Height="32" />
                        <TextBlock Style="{StaticResource BodyTextBlockStyle}" Text="{Binding AccountName}" VerticalAlignment="Center" />
                    </StackPanel>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <ListView x:Name="MailList" Grid.Column="1" Grid.Row="1">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <RelativePanel Width="380" Margin="0,0,0,8">
                        <TextBlock x:Name="From" Text="{Binding From}" Style="{StaticResource SubtitleTextBlockStyle}" />
                        <TextBlock x:Name="Subject" Text="{Binding Subject}" Style="{StaticResource BaseTextBlockStyle}" RelativePanel.Below="From" />
                        <TextBlock x:Name="Body" Text="{Binding Body}" Style="{StaticResource CaptionTextBlockStyle}" RelativePanel.Below="Subject" />
                        <TextBlock Text="{Binding ReceivedDate}" Style="{StaticResource CaptionTextBlockStyle}" RelativePanel.AlignTopWith="Subject" RelativePanel.AlignRightWithPanel="True" />
                    </RelativePanel>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <RelativePanel x:Name="ReadingPane" x:DeferLoadStrategy="Lazy" Grid.Row="1" Grid.Column="2" Margin="12" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

            <Button x:Name="Send">
                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <SymbolIcon Symbol="Send" />
                        <TextBlock FontSize="18" Text="Send" Margin="12,0,0,0" VerticalAlignment="Center" />
                    </StackPanel>
                </Button.Content>
            </Button>
            <Button Margin="12,0,0,0" RelativePanel.RightOf="Send">
                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <SymbolIcon Symbol="Delete" />
                        <TextBlock FontSize="18" Text="Discard" Margin="12,0,0,0" VerticalAlignment="Center" />
                    </StackPanel>
                </Button.Content>
            </Button>

            <TextBlock x:Name="ToLabel" Text="To:" Style="{StaticResource BodyTextBlockStyle}" RelativePanel.Below="Send" Margin="0,12" />
            <AutoSuggestBox RelativePanel.RightOf="ToLabel" RelativePanel.AlignVerticalCenterWith="ToLabel" RelativePanel.AlignRightWithPanel="True" Margin="12,0,0,0" />

            <TextBlock x:Name="CCLabel" Text="CC:" Style="{StaticResource BodyTextBlockStyle}" RelativePanel.Below="ToLabel" Margin="0,12" />
            <AutoSuggestBox RelativePanel.RightOf="CCLabel" RelativePanel.AlignVerticalCenterWith="CCLabel" RelativePanel.AlignRightWithPanel="True" Margin="12,0,0,0" />

            <RichEditBox x:Name="Body" RelativePanel.Below="CCLabel" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignBottomWithPanel="True" />

        </RelativePanel>
    </Grid>
</Page>
