<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="PasswordVaultSample.Scenario1_AddReadRemoveCredentials"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:PasswordVaultSample"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid x:Name="RootGrid" Margin="12,20,12,12">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Margin="0,0,0,10">
                <TextBlock Text="Description:" Style="{StaticResource SampleHeaderTextStyle}"/>
                <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
                    This scenario provides an example when an app wishes to store/retrieve/remove a password from PasswordVault.<LineBreak></LineBreak>
                    1. To add a credential, fill the resource, username and password, click "Save Credential", then a credential will be added to PasswordVault.<LineBreak></LineBreak>
                    2. To search a credential, fill resource or username, or both, click "Read Credential", then the search result will be returned.<LineBreak></LineBreak>
                    3. To remove a credential, fill both resouce and username, then click "Delete Credential", then the credential will be removed from PasswordVault.<LineBreak></LineBreak>
                    Note: This scenario also demonstrates initializing the PasswordVault asynchronously, for cases in which the first call to the PasswordVault may take a 
                    little more time. Also due to credential isolation, this sample only can access credentials written by itself, it cannot access any credentials created by 
                    other apps or processes.
                </TextBlock>
            </StackPanel>

            <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                <StackPanel Orientation="Vertical" VerticalAlignment="Top">
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Resource : " VerticalAlignment="Center" Width="85"/>
                        <TextBox x:Name="InputResourceValue" PlaceholderText="https://facebook.com" Width="150" AutomationProperties.AutomationId="InputResourceValue"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="User Name : " VerticalAlignment="Center" Width="85"/>
                        <TextBox x:Name="InputUserNameValue" PlaceholderText="abby@live.com" Width="150" AutomationProperties.AutomationId="InputUserNameValue"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="Password:" VerticalAlignment="Center" Width="85"/>
                        <PasswordBox x:Name="InputPasswordValue" Width="150" AutomationProperties.AutomationId="InputPasswordValue"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="85,10,0,0">
                        <Button x:Name="SaveCredButton" AutomationProperties.AutomationId="SaveCredButton" Content="Save Credential" Click="Save_Click" Width="150"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="85,10,0,0">
                        <Button x:Name="ReadCredButton" AutomationProperties.AutomationId="ReadCredButton" Content="Read Credential" Click="Read_Click" Width="150"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="85,10,0,0">
                        <Button x:Name="DeleteCredButton" AutomationProperties.AutomationId="DeleteCredButton" Content="Delete Credential" Click="Delete_Click" Width="150"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="85,10,0,0">
                        <Button x:Name="ResetScenario" Content="Reset Scenario" Click="Reset_Click" Width="150" AutomationProperties.AutomationId="ResetButton"/>
                    </StackPanel>
                </StackPanel>
            </ScrollViewer>

            <!-- Status Block for providing messages to the user.  Use the
             NotifyUser() method to populate the message -->
            <Border x:Name="ErrorBorder" Background="Red" Grid.Row="2"/>
            <TextBlock x:Name="StatusBlock" Grid.Row="2" Margin="12, 10, 12, 10" Visibility="Collapsed"/>
        </Grid>
    </Grid>
</Page>
