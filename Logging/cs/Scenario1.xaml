<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:LoggingCS"
    mc:Ignorable="d"
    x:Class="LoggingCS.Scenario1">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid x:Name="RootGrid" Margin="12,10,12,12">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Margin="0,0,0,10">
                <TextBlock Style="{StaticResource SampleHeaderTextStyle}">
                    LoggingChannel
                </TextBlock>
                <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
                    Demonstrates writing events with LoggingChannel and LoggingActivity.
                </TextBlock>
            </StackPanel>

            <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
                <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top">
                    <TextBlock TextWrapping="Wrap">
                        LoggingChannel can work in a Windows 8.1 compatibility mode or in a new
                        Windows 10 enhanced mode. Each of the buttons below will run the same scenario
                        using a different LoggingChannel mode. You can then compare the ETW output to
                        see the differences in the two modes.
                    </TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0 10 0 0">
                        Before clicking each button, you should start an ETW session to capture the
                        events from the scenario. Use a tool such as xperf to start a session capturing
                        the correct provider GUID, then click the button to log events, then stop the
                        session, and finally examine the ETL file (using xperf, tracerpt, or another
                        ETL decoding tool). For example, you might do the following (replacing GUID with
                        the correct GUID for each button):
                    </TextBlock>
                    <TextBlock Margin="0 10 0 0">
                        xperf -start MySession -f MyFile.etl -on GUID
                    </TextBlock>
                    <TextBlock Margin="0 10 0 0" FontStyle="Italic">
                        (click button)
                    </TextBlock>
                    <TextBlock Margin="0 10 0 0">
                        xperf -stop MySession
                    </TextBlock>
                    <TextBlock>
                        tracerpt MyFile.etl
                    </TextBlock>
                    <Button Content="Windows 8.1 mode" Click="DoWin81Mode" Margin="0 15 0 0" />
                    <TextBox Text="Use GUID: 4bd2826e-54a1-4ba9-bf63-92b73ea1ac4a" IsReadOnly="True" />
                    <Button Content="Windows 10 mode" Click="DoWin10Mode" Margin="0 15 0 0" />
                    <TextBox Text="Use GUID: eff1e128-4903-5093-096a-bdc29b38456f" IsReadOnly="True" />
                </StackPanel>
            </ScrollViewer>
        </Grid>
    </Grid>
    
</Page>
