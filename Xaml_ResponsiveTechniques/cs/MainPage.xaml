<Page
    x:Class="XAMLResponsiveTechniques.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:XAMLResponsiveTechniques"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Button Name="SplitViewButton" Background="Transparent" Padding="0,-6" Margin="12" Click="SplitViewButton_Click">
            <FontIcon FontFamily="{ThemeResource ContentControlThemeFontFamily}" Glyph="&#x2261;" FontSize="32" Margin="0,-8,0,0"/>
        </Button>
        <TextBlock Style="{ThemeResource SubheaderTextBlockStyle}" Text="Responsive Techniques" 
                   RelativePanel.RightOf="SplitViewButton" />
        <SplitView x:Name="MySplitView" PaneBackground="{ThemeResource ApplicationPageBackgroundThemeBrush}" OpenPaneLength="200"
                   RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignLeftWithPanel="True" RelativePanel.Below="SplitViewButton">
            <SplitView.Pane>
                <RelativePanel>
                    <!-- Static Relativepanel, substitutes nested stackpanel or grid with rows/columns for this simple scenario -->
                    <AppBarButton x:Name="BackgroundButton" Icon="Pictures"/>
                    <TextBlock Text="Background"  
                               RelativePanel.RightOf="BackgroundButton" />
                    <AppBarButton x:Name="LockButton" Icon="SetLockScreen" 
                                  RelativePanel.Below="BackgroundButton"/>
                    <TextBlock Text="Lock screen"  
                               RelativePanel.RightOf="LockButton" RelativePanel.Below="BackgroundButton"  />
                    <AppBarButton x:Name="CameraButton" Icon="Camera" 
                                  RelativePanel.Below="LockButton" />
                    <TextBlock Text="Camera"  
                               RelativePanel.RightOf="CameraButton" RelativePanel.Below="LockButton" />
                </RelativePanel>
            </SplitView.Pane>
            <ScrollViewer VerticalScrollBarVisibility="Auto" VerticalScrollMode="Auto" HorizontalScrollBarVisibility="Disabled" HorizontalScrollMode="Disabled">
                <RelativePanel>
                    <!-- Dynamic RelativePanel for composite content where UIElements change positions based on available space 
                         Note that the constraints that change are not declared inline here but declared within the VisualStates below where they apply.
                         This is a useful technique for RelativePanel since VisualStates automatically take care of unsetting properties when leaving a particular VisualState-->
                    <TextBlock Margin="5" x:Name="PreviewLabel" Text="Preview" Style="{ThemeResource BodyTextBlockStyle}" />
                    <Image Margin="5" x:Name="BackgroundImage" Source="Assets/Background.png" Stretch="None" Height="190" Width="360"
                       RelativePanel.Below="PreviewLabel"/>
                    <ComboBox Margin="5" x:Name="BackgroundCombo" Header="Background" SelectedIndex="0">
                        <ComboBoxItem>Picture</ComboBoxItem>
                        <ComboBoxItem>Color</ComboBoxItem>
                        <ComboBoxItem>Slide show</ComboBoxItem>
                    </ComboBox>
                    <TextBlock Margin="5" x:Name="PictureLabel" Text="Choose your picture" Style="{ThemeResource BodyTextBlockStyle}" />
                    <StackPanel Margin="5" x:Name="PicturesPanel" Orientation="Horizontal" RelativePanel.Below="PictureLabel">
                        <Image Margin="5" Height="93" Width="93" Source="Assets/Background.png" Stretch="UniformToFill" />
                        <Image Margin="5" Height="93" Width="93" Source="Assets/Background2.png" Stretch="UniformToFill" />
                        <Image Margin="5" Height="93" Width="93" Source="Assets/Background3.png" Stretch="UniformToFill" />
                        <Image Margin="5" Height="93" Width="93" Source="Assets/Background4.png" Stretch="UniformToFill" />
                    </StackPanel>
                    <Button Margin="5" x:Name="BrowseButton" Content="Browse" RelativePanel.Below="PicturesPanel" />
                    <ComboBox Margin="5" x:Name="FitCombo" Header="Choose a fit" SelectedIndex="0">
                        <ComboBoxItem>Fill</ComboBoxItem>
                        <ComboBoxItem>Fit</ComboBoxItem>
                        <ComboBoxItem>Stretch</ComboBoxItem>
                        <ComboBoxItem>Tile</ComboBoxItem>
                        <ComboBoxItem>Center</ComboBoxItem>
                        <ComboBoxItem>Span</ComboBoxItem>
                    </ComboBox>
                </RelativePanel>
            </ScrollViewer>
        </SplitView>
        <!-- Responsive VisualStates -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <!-- VisualState to be triggered when window width is >=720 effective pixels -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="720" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- Widest possible layout moves some elements around to optimize for more available width 
                        and keeps SplitView pane always showing inline -->
                        <Setter Target="MySplitView.DisplayMode" Value="Inline" />
                        <Setter Target="MySplitView.IsPaneOpen" Value="True" />                        
                        <Setter Target="BackgroundCombo.(RelativePanel.RightOf)" Value="BackgroundImage" />
                        <Setter Target="BackgroundCombo.(RelativePanel.AlignTopWith)" Value="BackgroundImage" />
                        <Setter Target="BackgroundCombo.(RelativePanel.AlignLeftWith)" Value="FitCombo" />
                        <Setter Target="PictureLabel.(RelativePanel.Below)" Value="BackgroundImage" />
                        <Setter Target="FitCombo.(RelativePanel.RightOf)" Value="PicturesPanel" />
                        <Setter Target="FitCombo.(RelativePanel.AlignTopWith)" Value="PictureLabel" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <!-- VisualState to be triggered when window width is >=548 and <720 effective pixels -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="548" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- For intermediate window widths as well as most phones on landscape orientation, 
                        this state keeps primary layout narrow while showing the splitview pane to take advantage of more available width than narrow layout -->
                        <Setter Target="MySplitView.DisplayMode" Value="Inline" />
                        <Setter Target="MySplitView.IsPaneOpen" Value="True" />                        
                        <Setter Target="BackgroundCombo.(RelativePanel.Below)" Value="BackgroundImage" />
                        <Setter Target="PictureLabel.(RelativePanel.Below)" Value="BackgroundCombo" />
                        <Setter Target="FitCombo.(RelativePanel.Below)" Value="BrowseButton" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <!-- VisualState to be triggered when window width is >=0 and <548 effective pixels -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- For the most narrow windows and phones in portrait orientation, this state collapses the SplitView pane into overlay mode
                        and adds dynamic RelativePanel constraints that puts all elements stacked below each other -->
                        <Setter Target="MySplitView.DisplayMode" Value="Overlay" />
                        <Setter Target="MySplitView.IsPaneOpen" Value="False" />                        
                        <Setter Target="BackgroundCombo.(RelativePanel.Below)" Value="BackgroundImage" />
                        <Setter Target="PictureLabel.(RelativePanel.Below)" Value="BackgroundCombo" />
                        <Setter Target="FitCombo.(RelativePanel.Below)" Value="BrowseButton" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </RelativePanel>
</Page>
